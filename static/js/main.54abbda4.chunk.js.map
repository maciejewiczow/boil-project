{"version":3,"sources":["components/GraphEditor/GraphNode.ts","components/GraphEditor/GraphEntityDetails/GraphEdgeDetails.tsx","components/GraphEditor/GraphEntityDetails/GraphNodeDetails.tsx","components/GraphEditor/GraphEntityDetails/GraphEntityDetails.tsx","components/GraphEditor/GraphEntityDetails/parts.ts","components/GraphEditor/HelpTooltip/parts.ts","components/GraphEditor/HelpTooltip/HelpTooltip.tsx","components/GraphEditor/GraphEditor/GraphEditor.tsx","components/GraphEditor/index.ts","components/GraphEditor/utils.ts","appConstants.ts","components/RouteDependentBackground/gradients.ts","assets/graph.svg","components/RouteDependentBackground/parts.ts","components/RouteDependentBackground/index.ts","components/RouteDependentBackground/RouteDependentBackground.tsx","views/PageLayoutParts.ts","views/BrokerProblemView/constants.ts","views/BrokerProblemView/alg.ts","views/BrokerProblemView/parts.ts","views/BrokerProblemView/BrokerProblemView.tsx","assets/transport-icon-6.svg","views/DeliveryNetworkView/algorithm.ts","components/ImageSVG.tsx","views/LandingView/parts.ts","views/LandingView/LandingView.tsx","components/GraphEditor/GraphDisplayer/parts.ts","components/GraphEditor/GraphDisplayer/GraphDisplayer.tsx","views/DeliveryNetworkView/parts.ts","views/DeliveryNetworkView/DeliveryNetworkView.tsx","App.tsx","index.tsx","components/GraphEditor/GraphEdge.ts","components/GraphEditor/GraphEditor/parts.ts","components/GraphEditor/GraphNodeContent/parts.ts","components/GraphEditor/GraphNodeContent/GraphNodeContent.tsx"],"names":["GraphNode","sequenceNumber","x","y","id","uuid","type","BrokerNode","this","CustomerNode","demand","SupplierNode","supply","GraphEdgeDetails","nodes","selectedEdge","onEdgeChange","readOnly","edgeWeightName","inputRef","React","useRef","useState","showFlowConstraints","setShowFlowConstraints","useEffect","current","focus","sourceNode","useMemo","find","n","source","targetNode","target","Fragment","title","Form","Group","controlId","Label","Control","ref","min","value","weight","onChange","e","Object","assign","Number","isNaN","valueAsNumber","disabled","undefined","max","newEdge","Button","variant","onClick","GraphNodeDetails","selectedNode","onNodeChange","typeName","FormGroup","as","constructor","name","newNode","GraphEntityDetails","className","selectedEntity","onEntityChange","GraphEdge","Wrapper","styled","div","Subtitle","Title","Arrow","CgArrowsHAlt","FormWrapper","AddConstraintsWrapper","ConstraintsText","ConstraintsHeader","HelpBody","Icon","IoIosHelpCircleOutline","HelpTooltip","isTootlipOpen","onIconClick","hidden","GraphEditor","graph","onGraphChange","selected","onSelectionChange","onCalculateClick","isHelpOpen","setIsHelpOpen","prev","nodeKey","edges","onSelectNode","node","onCreateNode","sequenceNum","getNextSequenceNumberForNodeType","onDeleteNode","_","__","nodeToDelete","newGraph","filter","edge","updateNodeNumbersAfterDeletion","deleteNode","onSelectEdge","onCreateEdge","isValidEdge","onDeleteEdge","renderNodeText","data","isSelected","GraphNodeContent","rotateEdgeHandle","showGraphControls","canSwapEdge","nodeTypes","default","shapeId","shape","viewBox","width","height","cx","cy","r","edgeTypes","fill","nodeSubtypes","none","refX","markerWidth","markerHeight","orient","d","length","updateNodeNumbers","forEach","nodeType","Math","map","RouteNames","_style","_g","defaultGradient","stops","color","offset","angle","routeGradients","route","BrokerProblem","gradient","DeliveryNetwork","Home","BackgroundSvg","svg","transition","VariableColorStop","stop","LinearGradient","linearGradient","RouteDependentBackground","children","location","useLocation","matchPath","pathname","useLocationGradient","xmlns","preserveAspectRatio","gradientUnits","x1","y1","x2","y2","gradientTransform","stopColor","PageWrapper","PageHeader","header","PageContent","initialSuppliers","price","initialCustomers","initialCosts","Array","isBalanced","suppliers","customers","sum","s","getOptimalityFactor","profitTable","dualVariables","i","j","get","alphas","betas","generateProfitTable","costs","matrix","zeros","findAndApplyCycle","solution","deltas","sortedDeltas","toArray","flatMap","row","v","sort","a","b","solutionArray","deltasArray","size","rows","cols","delta","console","log","warn","isSolutionOptimal","isOptimal","generateInitialSolution","profitsTable","balanced","localSuppliers","cloneDeep","localCustomers","profits","clone","resize","Infinity","sortedProfits","profit","c","routeValue","set","missingValuesCount","flatten","el","replacedValues","calculateDualVariables","transportTable","nSuppliers","nCustomers","transportArr","A","currentRow","val","B","assert","subset","index","range","squeeze","lusolve","slice","OriginalPageContent","TableInput","GridTable","ScrollTable","GridCell","col","StickyGridCell","SectionHeader","SectionHeaderText","h3","CustomersWrapper","SuppliersWrapper","CostsWrapper","ResultsWrapper","ProfitWrapper","ProfitLabel","ProfitText","SubmitArea","BrokerProblemView","setSuppliers","setCustomers","setCosts","results","setResults","updateSupplier","prop","newArr","updateCustomer","updateCosts","removeCutomer","removeSupplier","tabIndex","Table","bordered","striped","cellPadding","cost","nMax","localCosts","table","push","iteration","groupCollapsed","groupEnd","dotMultiply","puchaseCosts","add","incomes","income","calculateOptimalTransportTable","_extends","arguments","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgGraph","_ref","svgRef","titleId","props","xmlnsXlink","xmlSpace","ForwardRef","SvgTransportIcon6","style","enableBackground","glpk","LinkCard","Link","CardDescription","CardImageWrapper","src","Component","LandingView","to","TransportIcon","GraphIcon","BackButton","EditorWrapper","getEdgeColor","colors","ratio","ind","indexLower","floor","Color","indexUpper","ceil","mix","GraphDisplayer","onReset","colormap","colorMapName","nshades","format","reverse","minVal","maxVal","afterRenderEdge","egdeContainer","edgePath","querySelector","stroke","toString","markerEnd","edgeTextWrapper","canCreateEdge","OriginalPageWrapper","OriginalGraphEntityDetails","SolutionButtons","ButtonGroup","BsButton","SolutionDetails","EntityDetailsWrapper","libraryLoad","require","then","lib","getVariableDefsFromEdges","nodeId","outboundCoefficient","inboundCoefficient","coef","verifySolutionStatus","status","result","GLP_UNDEF","Error","GLP_INFEAS","GLP_NOFEAS","GLP_UNBND","optimize","problem","objective","direction","GLP_MIN","vars","subjectTo","bnds","GLP_LO","lb","ub","GLP_UP","GLP_FX","GLP_DB","minCostSolution","solve","msglev","GLP_MSG_DBG","GLP_MAX","maxFlowSolution","GLP_MSG_ALL","minCostGraph","maxFlowGraph","entries","minCost","flow","inflow","reduce","total","out","z","maxFlow","zip","e1","e2","DeliveryNetworkView","setGraph","showMaxFlowSolution","setShowMaxFlowSolution","solutions","setSolutions","setSelected","active","g","toast","error","message","entity","oldNode","invalidEdges","window","confirm","App","path","component","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","position","autoClose","limit","rtl","Slide","hideProgressBar","newestOnTop","closeOnClick","pauseOnFocusLoss","draggable","pauseOnHover","document","getElementById","GraphClickWrapper","GoButton","NodeTypeText","text","Name","NodeValue"],"mappings":"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","file":"static/js/main.54abbda4.chunk.js","sourcesContent":["import { INode } from 'react-digraph';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport abstract class GraphNode implements INode {\r\n    id: string = uuid();\r\n    // property used by react-digraph, but we are ignoring it's type system\r\n    readonly type = 'default';\r\n\r\n    constructor(\r\n        public sequenceNumber: number,\r\n        public x?: number,\r\n        public y?: number,\r\n    ) {}\r\n\r\n    abstract get title(): string;\r\n    abstract get typeName(): string;\r\n}\r\n\r\nexport class BrokerNode extends GraphNode {\r\n    get title() {\r\n        return `P ${this.sequenceNumber}`;\r\n    }\r\n\r\n    // eslint-disable-next-line class-methods-use-this\r\n    get typeName() {\r\n        return 'Pośrednik';\r\n    }\r\n}\r\n\r\nexport class CustomerNode extends GraphNode {\r\n    // eslint-disable-next-line class-methods-use-this\r\n    get typeName(): string {\r\n        return 'Odbiorca';\r\n    }\r\n\r\n    get title(): string {\r\n        return `O ${this.sequenceNumber}`;\r\n    }\r\n\r\n    constructor(\r\n        public demand: number,\r\n        sequenceNumber: number,\r\n        x?: number,\r\n        y?: number,\r\n    ) {\r\n        super(sequenceNumber, x, y);\r\n    }\r\n}\r\n\r\nexport class SupplierNode extends GraphNode {\r\n    // eslint-disable-next-line class-methods-use-this\r\n    get typeName(): string {\r\n        return 'Dostawca';\r\n    }\r\n\r\n    get title(): string {\r\n        return `D ${this.sequenceNumber}`;\r\n    }\r\n\r\n    constructor(\r\n        public supply: number,\r\n        sequenceNumber: number,\r\n        x?: number,\r\n        y?: number,\r\n    ) {\r\n        super(sequenceNumber, x, y);\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { GraphEdge } from '../GraphEdge';\r\nimport { GraphNode } from '../GraphNode';\r\nimport {\r\n    AddConstraintsWrapper,\r\n    Arrow,\r\n    ConstraintsHeader,\r\n    ConstraintsText,\r\n    FormWrapper,\r\n    Subtitle,\r\n    Title,\r\n} from './parts';\r\n\r\ninterface GraphEdgeDetailsProps {\r\n    selectedEdge: GraphEdge;\r\n    onEdgeChange: (edge: GraphEdge) => void;\r\n    nodes: GraphNode[];\r\n    readOnly?: boolean;\r\n    edgeWeightName?: string;\r\n}\r\n\r\nexport const GraphEdgeDetails: React.FC<GraphEdgeDetailsProps> = ({ nodes, selectedEdge, onEdgeChange, readOnly = false, edgeWeightName = 'Koszt' }) => {\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n    const [showFlowConstraints, setShowFlowConstraints] = useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if (!readOnly) {\r\n            inputRef.current?.focus();\r\n            setShowFlowConstraints(false);\r\n        }\r\n    }, [selectedEdge.id, readOnly]);\r\n\r\n    const sourceNode = React.useMemo(() => nodes.find(n => n.id === selectedEdge.source), [nodes, selectedEdge.source]);\r\n    const targetNode = React.useMemo(() => nodes.find(n => n.id === selectedEdge.target), [nodes, selectedEdge.target]);\r\n\r\n    if (!sourceNode || !targetNode)\r\n        return null;\r\n\r\n    const updateEdgeWeight = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        onEdgeChange(\r\n            Object.assign(\r\n                selectedEdge,\r\n                { weight: Number.isNaN(e.target.valueAsNumber) ? 0 : e.target.valueAsNumber },\r\n            ),\r\n        );\r\n    };\r\n\r\n    const updateEdgeMinFlow = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newEdge = Object.assign(\r\n            selectedEdge,\r\n            { min: Number.isNaN(e.target.valueAsNumber) ? 0 : e.target.valueAsNumber },\r\n        );\r\n\r\n        if (newEdge.max !== undefined && newEdge.min > newEdge.max)\r\n            newEdge.min = newEdge.max;\r\n\r\n        onEdgeChange(newEdge);\r\n    };\r\n\r\n    const updateEdgeMaxFlow = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newEdge = Object.assign(\r\n            selectedEdge,\r\n            { max: Number.isNaN(e.target.valueAsNumber) ? undefined : e.target.valueAsNumber },\r\n        );\r\n\r\n        if (newEdge.max !== undefined && newEdge.min > newEdge.max)\r\n            newEdge.max = newEdge.min;\r\n\r\n        onEdgeChange(newEdge);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Subtitle>Trasa</Subtitle>\r\n            <Title>{sourceNode.title} <Arrow /> {targetNode.title}</Title>\r\n            <FormWrapper>\r\n                <Form.Group controlId=\"edgeWeight\">\r\n                    <Form.Label>{edgeWeightName}</Form.Label>\r\n                    <Form.Control\r\n                        ref={inputRef}\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        value={selectedEdge.weight}\r\n                        onChange={updateEdgeWeight}\r\n                        disabled={readOnly}\r\n                        readOnly={readOnly}\r\n                    />\r\n                </Form.Group>\r\n                {((selectedEdge.min === 0 && selectedEdge.max === undefined) && !showFlowConstraints) ? (\r\n                    !readOnly && (\r\n                        <AddConstraintsWrapper>\r\n                            <ConstraintsText>Ogranicz przepływ</ConstraintsText>\r\n                            <Button variant=\"outline-success\" onClick={() => setShowFlowConstraints(true)}>+</Button>\r\n                        </AddConstraintsWrapper>\r\n                    )\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <ConstraintsHeader>Ograniczenia przepływu</ConstraintsHeader>\r\n                        <Form.Group controlId=\"minFlow\">\r\n                            <Form.Label>Minimalny</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                value={selectedEdge.min}\r\n                                onChange={updateEdgeMinFlow}\r\n                                disabled={readOnly}\r\n                                readOnly={readOnly}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"maxFlow\">\r\n                            <Form.Label>Maksymalny</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                value={selectedEdge.max}\r\n                                onChange={updateEdgeMaxFlow}\r\n                                disabled={readOnly}\r\n                                readOnly={readOnly}\r\n                            />\r\n                        </Form.Group>\r\n                    </React.Fragment>\r\n                )}\r\n            </FormWrapper>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormGroup from 'react-bootstrap/esm/FormGroup';\r\nimport { BrokerNode, CustomerNode, GraphNode, SupplierNode } from '../GraphNode';\r\nimport { FormWrapper, Subtitle, Title } from './parts';\r\n\r\ninterface GraphNodeDetailsProps {\r\n    selectedNode: GraphNode;\r\n    onNodeChange: (node: GraphNode) => void;\r\n    readOnly?: boolean;\r\n}\r\n\r\nexport const GraphNodeDetails: React.FC<GraphNodeDetailsProps> = ({ selectedNode, onNodeChange, readOnly = false }) => {\r\n    const inputRef = React.useRef<HTMLSelectElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (!readOnly)\r\n            inputRef.current?.focus();\r\n    }, [selectedNode.id, readOnly]);\r\n\r\n    const updateNodeType = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        let newNode: GraphNode;\r\n        switch (e.target.value) {\r\n            case 'BrokerNode':\r\n                newNode = new BrokerNode(0);\r\n                break;\r\n            case 'CustomerNode':\r\n                newNode = new CustomerNode(0, 0);\r\n                break;\r\n            case 'SupplierNode':\r\n                newNode = new SupplierNode(0, 0);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        onNodeChange(Object.assign(newNode, selectedNode));\r\n    };\r\n\r\n    const updateCustomerNodeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const demand = Number.isNaN(e.target.valueAsNumber) ? 0 : e.target.valueAsNumber;\r\n\r\n        onNodeChange(\r\n            Object.assign(\r\n                new CustomerNode(0, 0),\r\n                selectedNode,\r\n                { demand },\r\n            ),\r\n        );\r\n    };\r\n\r\n    const updateSupplierNodeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const supply = Number.isNaN(e.target.valueAsNumber) ? 0 : e.target.valueAsNumber;\r\n\r\n        onNodeChange(\r\n            Object.assign(\r\n                new SupplierNode(0, 0),\r\n                selectedNode,\r\n                { supply },\r\n            ),\r\n        );\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Subtitle>Węzeł</Subtitle>\r\n            <Title>{selectedNode.typeName} {selectedNode.sequenceNumber}</Title>\r\n            <FormWrapper>\r\n                <FormGroup controlId=\"nodeType\">\r\n                    <Form.Label>Typ węzła</Form.Label>\r\n                    <Form.Control disabled={readOnly} readOnly={readOnly} ref={inputRef} as=\"select\" value={selectedNode.constructor.name} onChange={updateNodeType}>\r\n                        <option value=\"SupplierNode\">Dostawca</option>\r\n                        <option value=\"BrokerNode\">Pośrednik</option>\r\n                        <option value=\"CustomerNode\">Odbiorca</option>\r\n                    </Form.Control>\r\n                </FormGroup>\r\n                {selectedNode instanceof BrokerNode || (\r\n                    <FormGroup controlId=\"nodeValue\">\r\n                        {selectedNode instanceof SupplierNode && (\r\n                            <React.Fragment>\r\n                                <Form.Label>Podaż</Form.Label>\r\n                                <Form.Control disabled={readOnly} readOnly={readOnly} type=\"number\" min=\"0\" value={selectedNode.supply} onChange={updateSupplierNodeValue} />\r\n                            </React.Fragment>\r\n                        )}\r\n                        {selectedNode instanceof CustomerNode && (\r\n                            <React.Fragment>\r\n                                <Form.Label>Popyt</Form.Label>\r\n                                <Form.Control disabled={readOnly} readOnly={readOnly} type=\"number\" min=\"0\" value={selectedNode.demand} onChange={updateCustomerNodeValue} />\r\n                            </React.Fragment>\r\n                        )}\r\n                    </FormGroup>\r\n                )}\r\n            </FormWrapper>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { GraphEdge } from '../GraphEdge';\r\nimport { GraphNode } from '../GraphNode';\r\nimport { GraphEdgeDetails } from './GraphEdgeDetails';\r\nimport { GraphNodeDetails } from './GraphNodeDetails';\r\nimport { Wrapper } from './parts';\r\n\r\ninterface GraphEntityDetailsProps {\r\n    className?: string;\r\n    selectedEntity: GraphNode | GraphEdge | null;\r\n    nodes: GraphNode[];\r\n    onEntityChange: (entity: GraphNode | GraphEdge) => void;\r\n    readOnly?: boolean;\r\n    edgeWeightName?: string;\r\n}\r\n\r\nexport const GraphEntityDetails: React.FC<GraphEntityDetailsProps> = ({ className, nodes, selectedEntity, onEntityChange, edgeWeightName, readOnly = false }) => {\r\n    if (selectedEntity === null)\r\n        return null;\r\n\r\n    return (\r\n        <Wrapper className={className}>\r\n            {selectedEntity instanceof GraphEdge ? (\r\n                <GraphEdgeDetails\r\n                    selectedEdge={selectedEntity}\r\n                    onEdgeChange={onEntityChange}\r\n                    nodes={nodes}\r\n                    readOnly={readOnly}\r\n                    edgeWeightName={edgeWeightName}\r\n                />\r\n            ) : (\r\n                <GraphNodeDetails\r\n                    selectedNode={selectedEntity}\r\n                    onNodeChange={onEntityChange}\r\n                    readOnly={readOnly}\r\n                />\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n","import Form from 'react-bootstrap/Form';\r\nimport { CgArrowsHAlt } from 'react-icons/cg';\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 12px 18px;\r\n    margin-right: 24px;\r\n    font-size: 15px;\r\n    height: auto;\r\n\r\n    border-top-right-radius: 3px;\r\n    border-bottom-right-radius: 3px;\r\n    background: white;\r\n\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n`;\r\n\r\nexport const Subtitle = styled.div`\r\n    font-size: 12px;\r\n    color: #444;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n    font-size: 22px;\r\n`;\r\n\r\nexport const Arrow = styled(CgArrowsHAlt)`\r\n    margin: 0 4px;\r\n`;\r\n\r\nexport const FormGroup = styled(Form.Group)`\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n`;\r\n\r\nexport const FormWrapper = styled.div`\r\n    margin-top: 12px;\r\n`;\r\n\r\nexport const AddConstraintsWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const ConstraintsText = styled.div`\r\n    flex-grow: 1;\r\n    margin-right: 3px;\r\n`;\r\n\r\nexport const ConstraintsHeader = styled.div`\r\n    margin-bottom: 6px;\r\n    font-size: 18px;\r\n`;\r\n","import { IoIosHelpCircleOutline } from 'react-icons/io';\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div``;\r\n\r\nexport const HelpBody = styled.div`\r\n    position: absolute;\r\n    right: 8px;\r\n    top: 8px;\r\n    z-index: 19;\r\n    background: rgba(255,255,255,0.8);\r\n    padding: 12px 18px;\r\n    padding-right: 35px;\r\n\r\n    box-shadow: 0 5px 10px 0 rgba(0,0,0,0.4);\r\n`;\r\n\r\nexport const Icon = styled(IoIosHelpCircleOutline)`\r\n    position: absolute;\r\n    top: 12px;\r\n    right: 12px;\r\n    cursor: pointer;\r\n    color: #777;\r\n    width: 35px;\r\n    height: 35px;\r\n    z-index: 20;\r\n`;\r\n","import React from 'react';\r\nimport { Wrapper, Icon, HelpBody } from './parts';\r\n\r\ninterface HelpTooltipProps {\r\n    isTootlipOpen?: boolean;\r\n    onIconClick?: React.MouseEventHandler<SVGElement>;\r\n    className?: string;\r\n}\r\n\r\nexport const HelpTooltip: React.FC<HelpTooltipProps> = ({\r\n    isTootlipOpen,\r\n    onIconClick,\r\n    className,\r\n}) => (\r\n    <Wrapper className={className}>\r\n        <Icon onClick={onIconClick} />\r\n        <HelpBody hidden={!isTootlipOpen}>\r\n            SHIFT + kliknięcie - nowy węzeł<br />\r\n            SHIFT + kliknięcie na węzeł + przeciągnięcie - utworzenie nowej krawędzi <br />\r\n            DEL - usuniecie zaznaczonego elementu<br />\r\n        </HelpBody>\r\n    </Wrapper>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { GraphView, IEdge, INode } from 'react-digraph';\r\nimport { BsChevronRight } from 'react-icons/bs';\r\nimport { GraphEditorProps } from '../constants';\r\nimport GraphNodeContent from '../GraphNodeContent/GraphNodeContent';\r\nimport { GraphEdge } from '../GraphEdge';\r\nimport { BrokerNode, GraphNode } from '../GraphNode';\r\nimport { HelpTooltip } from '../HelpTooltip/HelpTooltip';\r\nimport { Wrapper, GraphClickWrapper, GoButton } from './parts';\r\nimport { getNextSequenceNumberForNodeType, isValidEdge, updateNodeNumbers as updateNodeNumbersAfterDeletion } from '../utils';\r\n\r\nconst GraphEditor: React.FC<GraphEditorProps> = ({ graph, onGraphChange, selected, onSelectionChange, onCalculateClick }) => {\r\n    const [isHelpOpen, setIsHelpOpen] = useState(false);\r\n\r\n    const selectNode = (node: INode | null) => {\r\n        onSelectionChange(node as GraphNode | null);\r\n    };\r\n\r\n    const selectEdge = (edge: IEdge | null) => {\r\n        onSelectionChange(edge as GraphEdge | null);\r\n    };\r\n\r\n    const addNode = (x: number, y: number) => {\r\n        const sequenceNum = getNextSequenceNumberForNodeType(graph.nodes, BrokerNode);\r\n\r\n        const newNode = new BrokerNode(sequenceNum, x, y);\r\n\r\n        onGraphChange({\r\n            ...graph,\r\n            nodes: [\r\n                ...graph.nodes,\r\n                newNode,\r\n            ],\r\n        });\r\n        onSelectionChange(newNode);\r\n    };\r\n\r\n    const deleteNode = (id: string) => {\r\n        const nodeToDelete = graph.nodes.find(n => n.id === id);\r\n\r\n        if (!nodeToDelete)\r\n            return;\r\n\r\n        const newGraph = {\r\n            edges: graph.edges.filter(edge => edge.target !== id && edge.source !== id),\r\n            nodes: graph.nodes.filter(node => node.id !== id),\r\n        };\r\n\r\n        updateNodeNumbersAfterDeletion(nodeToDelete, newGraph.nodes);\r\n\r\n        onGraphChange(newGraph);\r\n        onSelectionChange(null);\r\n    };\r\n\r\n    const addEdge = (source: INode, target: INode) => {\r\n        if (!isValidEdge(source, target))\r\n            return;\r\n\r\n        const newEdge = new GraphEdge(source.id, target.id, 0);\r\n\r\n        onGraphChange({\r\n            ...graph,\r\n            edges: [\r\n                ...graph.edges,\r\n                newEdge,\r\n            ],\r\n        });\r\n        onSelectionChange(newEdge);\r\n    };\r\n\r\n    const deleteEdge = (edge: IEdge) => {\r\n        onGraphChange({\r\n            ...graph,\r\n            edges: graph.edges.filter(e => e.id !== edge.id),\r\n        });\r\n        onSelectionChange(null);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <HelpTooltip isTootlipOpen={isHelpOpen} onIconClick={() => setIsHelpOpen(prev => !prev)} />\r\n            <GraphClickWrapper onClick={() => setIsHelpOpen(false)}>\r\n                <GraphView\r\n                    nodeKey=\"id\"\r\n                    nodes={graph.nodes}\r\n                    edges={graph.edges}\r\n                    selected={selected}\r\n                    onSelectNode={selectNode}\r\n                    onCreateNode={addNode}\r\n                    onDeleteNode={(_, id, __) => deleteNode(id)}\r\n                    onSelectEdge={selectEdge}\r\n                    onCreateEdge={addEdge}\r\n                    onDeleteEdge={deleteEdge}\r\n                    renderNodeText={(data, id, isSelected) => <GraphNodeContent node={data} id={id} isSelected={isSelected} />}\r\n                    rotateEdgeHandle={false}\r\n                    showGraphControls={false}\r\n                    canSwapEdge={() => false}\r\n                    nodeTypes={{\r\n                        default: {\r\n                            shapeId: '#defaultNode',\r\n                            shape: (\r\n                                <symbol viewBox=\"0 0 100 100\" width=\"100\" height=\"100\" id=\"defaultNode\">\r\n                                    <circle cx=\"50\" cy=\"50\" r=\"48\" />\r\n                                </symbol>\r\n                            ),\r\n                        },\r\n                    }}\r\n                    edgeTypes={{\r\n                        default: {\r\n                            shapeId: '#defaultEdge',\r\n                            shape: (\r\n                                <symbol viewBox=\"0 0 70 30\" id=\"defaultEdge\" key=\"0\">\r\n                                    <rect x=\"0\" y=\"0\" width=\"70\" height=\"30\" fill=\"currentColor\" />\r\n                                </symbol>\r\n                            ),\r\n                        },\r\n                    }}\r\n                    nodeSubtypes={{\r\n                        none: {\r\n                            shapeId: '',\r\n                            // used as a way to insert things into <defs>\r\n                            shape: (\r\n                                <marker id=\"end-arrow-not-selected\" viewBox=\"0 -4 8 8\" refX=\"4\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\r\n                                    <path d=\"M0,-4L8,0L0,4\" width=\"8\" height=\"8\" />\r\n                                </marker>\r\n                            ),\r\n                        },\r\n                    }}\r\n                />\r\n                <GoButton\r\n                    variant=\"primary\"\r\n                    disabled={!(graph.nodes.length > 0 && graph.edges.length > 0)}\r\n                    onClick={onCalculateClick}\r\n                >\r\n                    Optymalizuj <BsChevronRight />\r\n                </GoButton>\r\n            </GraphClickWrapper>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default GraphEditor;\r\n","import GraphEditor from './GraphEditor/GraphEditor';\r\n\r\nexport * from './constants';\r\nexport * from './GraphEdge';\r\nexport * from './GraphNode';\r\nexport * from './GraphEntityDetails/GraphEntityDetails';\r\n\r\nexport default GraphEditor;\r\n","import { INode } from 'react-digraph';\r\nimport { CustomerNode, GraphNode, SupplierNode } from './GraphNode';\r\n\r\nexport const updateNodeNumbers = (nodeToDelete: GraphNode, nodes: GraphNode[]) => {\r\n    nodes\r\n        .filter(n => n.constructor === nodeToDelete.constructor)\r\n        .forEach(n => {\r\n            if (n.sequenceNumber > nodeToDelete.sequenceNumber)\r\n                n.sequenceNumber--;\r\n        });\r\n};\r\n\r\nexport const getNextSequenceNumberForNodeType = (nodes: GraphNode[], nodeType: typeof GraphNode | GraphNode) => (\r\n    Math.max(\r\n        0,\r\n        ...nodes\r\n            .filter(node => (\r\n                typeof nodeType === 'function' ? (\r\n                    node instanceof nodeType\r\n                ) : (\r\n                    node.constructor === nodeType.constructor\r\n                )\r\n            ))\r\n            .map(node => node.sequenceNumber),\r\n    ) + 1\r\n);\r\n\r\nexport const isValidEdge = (source: INode, target: INode) => (\r\n    true\r\n);\r\n","export enum RouteNames {\r\n    Home = '/',\r\n    BrokerProblem = '/broker',\r\n    DeliveryNetwork = '/linear',\r\n}\r\n","import { RouteNames } from 'appConstants';\r\nimport { matchPath, RouteProps, useLocation } from 'react-router';\r\n\r\ninterface GradientStop {\r\n    color: string;\r\n    offset: number;\r\n}\r\n\r\ninterface ThreeStopGradient {\r\n    stops: [GradientStop, GradientStop, GradientStop];\r\n    angle: number;\r\n}\r\n\r\nconst defaultGradient: ThreeStopGradient = {\r\n    stops: [\r\n        {\r\n            color: '#2C5364',\r\n            offset: 0,\r\n        },\r\n        {\r\n            color: '#203A43',\r\n            offset: 0.5,\r\n        },\r\n        {\r\n            color: '#0F2027',\r\n            offset: 1,\r\n        },\r\n    ],\r\n    angle: 230,\r\n};\r\n\r\ntype RouteGradientConfig = {\r\n    route: string | string[] | Omit<RouteProps, 'render' | 'component' | 'children'>;\r\n    gradient: ThreeStopGradient;\r\n}[];\r\n\r\nconst routeGradients: RouteGradientConfig = [\r\n    {\r\n        route: RouteNames.BrokerProblem,\r\n        gradient: {\r\n            stops: [\r\n                {\r\n                    color: '#677478',\r\n                    offset: 0,\r\n                },\r\n                {\r\n                    color: '#485260',\r\n                    offset: 0.5,\r\n                },\r\n                {\r\n                    color: '#283048',\r\n                    offset: 1,\r\n                },\r\n            ],\r\n            angle: 300,\r\n        },\r\n    },\r\n    {\r\n        route: RouteNames.DeliveryNetwork,\r\n        gradient: {\r\n            stops: [\r\n                {\r\n                    color: 'rgba(73,93,109,1)',\r\n                    offset: 0.189,\r\n                },\r\n                {\r\n                    color: 'rgb(61,74,96)',\r\n                    offset: 0.5,\r\n                },\r\n                {\r\n                    color: 'rgba(49,55,82,1)',\r\n                    offset: 0.911,\r\n                },\r\n            ],\r\n            angle: 200,\r\n        },\r\n    },\r\n    {\r\n        route: RouteNames.Home,\r\n        gradient: defaultGradient,\r\n    },\r\n];\r\n\r\nexport const useLocationGradient = (): ThreeStopGradient => {\r\n    const location = useLocation();\r\n\r\n    return routeGradients\r\n        .find(({ route }) => matchPath(location.pathname, route) !== null)?.gradient ?? defaultGradient;\r\n};\r\n","var _style, _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGraph(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 142 134\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st1{fill:none;stroke:#000000;stroke-width:3.5;stroke-miterlimit:10;}\\n\\t.st2{fill:none;stroke:#000000;stroke-width:4;stroke-miterlimit:10;}\\n\\t.st3{fill:none;stroke:#000000;stroke-width:2;stroke-miterlimit:10;}\\n\\t.st4{fill:#000000;stroke:#000000;stroke-miterlimit:10;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"st1\",\n    cx: 72,\n    cy: 17,\n    r: 15.2\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"st2\",\n    cx: 72.2,\n    cy: 66.5,\n    r: 15\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"st1\",\n    cx: 72,\n    cy: 116.8,\n    r: 15.2\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"st3\",\n    cx: 125,\n    cy: 67,\n    r: 15.2\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"st4\",\n    cx: 16,\n    cy: 42.2,\n    r: 15.5\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"st4\",\n    cx: 16,\n    cy: 90.7,\n    r: 15.5\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 29.1,\n    y1: 48.1,\n    x2: 57.7,\n    y2: 61.2\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 28.7,\n    y1: 35.5,\n    x2: 57.7,\n    y2: 22.2\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 23.8,\n    y1: 54.6,\n    x2: 62.8,\n    y2: 104.7\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 28.3,\n    y1: 84.9,\n    x2: 58.2,\n    y2: 72\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 23.8,\n    y1: 79.2,\n    x2: 62.5,\n    y2: 28.9\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 28.3,\n    y1: 96.5,\n    x2: 58.2,\n    y2: 110.5\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 82.8,\n    y1: 106.1,\n    x2: 113.8,\n    y2: 77.3\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 88.1,\n    y1: 66.5,\n    x2: 109.8,\n    y2: 67\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    className: \"st2\",\n    x1: 83.4,\n    y1: 27,\n    x2: 114.6,\n    y2: 56\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGraph);\nexport default __webpack_public_path__ + \"static/media/graph.e1c9b01a.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    min-height: 100vh;\r\n    position: relative;\r\n`;\r\n\r\nexport const BackgroundSvg = styled.svg`\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst transition = '1.5s ease-in-out';\r\n\r\nexport const VariableColorStop = styled.stop`\r\n    transition: stop-color ${transition}, offset ${transition};\r\n`;\r\n\r\nexport const LinearGradient = styled.linearGradient`\r\n    transition: transform ${transition};\r\n    transform-origin: center center;\r\n`;\r\n","import { RouteDependentBackground } from './RouteDependentBackground';\r\n\r\nexport default RouteDependentBackground;\r\n","import React from 'react';\r\nimport { useLocationGradient } from './gradients';\r\nimport { Wrapper, BackgroundSvg, LinearGradient, VariableColorStop } from './parts';\r\n\r\ninterface ClassNameProps {\r\n    className?: string;\r\n}\r\n\r\nexport const RouteDependentBackground: React.FC<ClassNameProps> = ({ className, children }) => {\r\n    const { angle, stops } = useLocationGradient();\r\n\r\n    return (\r\n        <Wrapper className={className}>\r\n            <BackgroundSvg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                viewBox=\"0 0 1 1\"\r\n                preserveAspectRatio=\"none\"\r\n            >\r\n                <LinearGradient\r\n                    id=\"background-grad-generated\"\r\n                    gradientUnits=\"userSpaceOnUse\"\r\n                    x1=\"0%\"\r\n                    y1=\"0%\"\r\n                    x2=\"100%\"\r\n                    y2=\"0%\"\r\n                    gradientTransform={`rotate(${angle})`}\r\n                >\r\n                    <VariableColorStop offset={`${stops[0].offset * 100}%`} stopColor={stops[0].color} />\r\n                    <VariableColorStop offset={`${stops[1].offset * 100}%`} stopColor={stops[1].color} />\r\n                    <VariableColorStop offset={`${stops[2].offset * 100}%`} stopColor={stops[2].color} />\r\n                </LinearGradient>\r\n                <rect x=\"0\" y=\"0\" width=\"1\" height=\"1\" fill=\"url(#background-grad-generated)\" />\r\n            </BackgroundSvg>\r\n            {children}\r\n        </Wrapper>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const PageWrapper = styled.div`\r\n    min-height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 17.5% 65% 17.5%;\r\n    grid-template-rows: auto 1fr;\r\n\r\n    grid-template-areas:\r\n        \"header header header\"\r\n        \". content .\";\r\n`;\r\n\r\nexport const PageHeader = styled.header`\r\n    color: white;\r\n    font-size: 42px;\r\n    text-align: center;\r\n    padding: 32px 0;\r\n    letter-spacing: 2px;\r\n\r\n    grid-area: header;\r\n`;\r\n\r\nexport const PageContent = styled.div`\r\n    flex-grow: 1;\r\n    background: white;\r\n    border-top-right-radius: 5px;\r\n    border-top-left-radius: 5px;\r\n    padding: 12px 18px;\r\n\r\n    grid-area: content;\r\n`;\r\n","import { Supplier, Customer } from './interfaces';\r\n\r\n// export const initialSuppliers: Supplier[] = [\r\n//     {\r\n//         supply: 10,\r\n//         price: 6,\r\n//     },\r\n//     {\r\n//         supply: 30,\r\n//         price: 9,\r\n//     },\r\n// ];\r\n\r\n// export const initialCustomers: Customer[] = [\r\n//     {\r\n//         demand: 10,\r\n//         price: 15,\r\n//     },\r\n//     {\r\n//         demand: 10,\r\n//         price: 14,\r\n//     },\r\n//     {\r\n//         demand: 11,\r\n//         price: 16,\r\n//     },\r\n// ];\r\n\r\n// export const initialCosts: number[][] = [\r\n//     [4, 7, 2],\r\n//     [8, 10, 4],\r\n// ];\r\n\r\n// export const initialSuppliers: Supplier[] = [\r\n//     {\r\n//         supply: 20,\r\n//         price: 10,\r\n//     },\r\n//     {\r\n//         supply: 30,\r\n//         price: 12,\r\n//     },\r\n// ];\r\n\r\n// export const initialCustomers: Customer[] = [\r\n//     {\r\n//         demand: 20,\r\n//         price: 60,\r\n//     },\r\n//     {\r\n//         demand: 28,\r\n//         price: 25,\r\n//     },\r\n//     {\r\n//         demand: 27,\r\n//         price: 30,\r\n//     },\r\n// ];\r\n\r\n// export const initialCosts: number[][] = [\r\n//     [8, 14, 17],\r\n//     [12, 9, 19],\r\n// ];\r\n\r\nexport const initialSuppliers: Supplier[] = [\r\n    {\r\n        price: 0,\r\n        supply: 0,\r\n    },\r\n    {\r\n        price: 0,\r\n        supply: 0,\r\n    },\r\n];\r\nexport const initialCustomers: Customer[] = [\r\n    {\r\n        price: 0,\r\n        demand: 0,\r\n    },\r\n    {\r\n        price: 0,\r\n        demand: 0,\r\n    },\r\n    {\r\n        price: 0,\r\n        demand: 0,\r\n    },\r\n];\r\n\r\nexport const initialCosts: number[][] = initialSuppliers.map(_ => (\r\n    new Array(initialCustomers.length).fill(0)\r\n));\r\n","import cloneDeep from 'lodash/cloneDeep';\r\nimport {\r\n    zeros,\r\n    map,\r\n    matrix,\r\n    Matrix,\r\n    index,\r\n    range,\r\n    lusolve,\r\n    squeeze,\r\n    subset,\r\n    sum,\r\n    dotMultiply,\r\n    flatten,\r\n    add,\r\n} from 'mathjs';\r\nimport { Supplier, Customer, DualVariables, Results } from './interfaces';\r\n\r\nconst isBalanced = (suppliers: Supplier[], customers: Customer[]) => sum(suppliers.map(s => s.supply)) === sum(customers.map(s => s.demand));\r\n\r\nconst getOptimalityFactor = (profitTable: Matrix, dualVariables: DualVariables) => (\r\n    map(\r\n        profitTable,\r\n        (_, [i, j]: [number, number]) => profitTable.get([i, j]) - dualVariables.alphas[i] - dualVariables.betas[j],\r\n    )\r\n);\r\n\r\nconst generateProfitTable = (suppliers: Supplier[], customers: Customer[], costs: Matrix) => (\r\n    map(\r\n        matrix(zeros(suppliers.length, customers.length)),\r\n        (_, [i, j]: [number, number]) => customers[j].price - costs.get([i, j]) - suppliers[i].price,\r\n    )\r\n);\r\n\r\nconst findAndApplyCycle = (solution: Matrix, deltas: Matrix) => {\r\n    const sortedDeltas = (deltas.toArray() as number[][])\r\n        .flatMap((row, i) => row.map((value, j) => ({ value, i, j })))\r\n        .filter(v => v.value > 0)\r\n        .sort((a, b) => b.value - a.value);\r\n\r\n    const solutionArray = solution.toArray() as (number | undefined)[][];\r\n    const deltasArray = deltas.toArray() as number[][];\r\n\r\n    const [rows, cols] = deltas.size();\r\n    for (const delta of sortedDeltas) {\r\n        for (let i = 0; i < rows; i++) {\r\n            if (deltasArray[i][delta.j] === 0) {\r\n                for (let j = 0; j < cols; j++) {\r\n                    if (deltasArray[i][j] === 0 && deltasArray[delta.i][j] === 0) {\r\n                        const value = Math.min(solutionArray[i][delta.j] ?? 0, solutionArray[delta.i][j] ?? 0);\r\n\r\n                        solutionArray[i][delta.j] = (solutionArray[i][delta.j] ?? 0) - value;\r\n                        solutionArray[delta.i][j] = (solutionArray[delta.i][j] ?? 0) - value;\r\n                        solutionArray[delta.i][delta.j] = (solutionArray[delta.i][delta.j] ?? 0) + value;\r\n                        solutionArray[i][j] = (solutionArray[i][j] ?? 0) + value;\r\n\r\n                        // Leaves one of the zeroes in the base solution if there are two zeroes in the negative semicycle\r\n                        if (solutionArray[i][delta.j] === 0 && solutionArray[delta.i][j] !== 0)\r\n                            solutionArray[i][delta.j] = undefined;\r\n\r\n                        if (solutionArray[delta.i][j] === 0)\r\n                            solutionArray[delta.i][j] = undefined;\r\n\r\n                        console.log(`Znaleziono cykl: (${delta.i}, ${delta.j}) -> (${delta.i}, ${j}) -> (${i}, ${j}) -> (${i}, ${delta.j})`);\r\n\r\n                        // Because typings for mathjs are wrong and matrix can contain any values, not just numberss\r\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n                        // @ts-ignore\r\n                        return matrix(solutionArray);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    console.warn('No cycle was found!');\r\n\r\n    // Same as above\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    return matrix(solutionArray);\r\n};\r\n\r\nconst isSolutionOptimal = (deltas: Matrix) => {\r\n    let isOptimal = true;\r\n    deltas.forEach(value => {\r\n        if (value > 0)\r\n            isOptimal = false;\r\n    });\r\n    return isOptimal;\r\n};\r\n\r\nconst generateInitialSolution = (suppliers: Supplier[], customers: Customer[], profitsTable: Matrix, balanced: boolean) => {\r\n    const localSuppliers = cloneDeep(suppliers);\r\n    const localCustomers = cloneDeep(customers);\r\n    const profits = profitsTable.clone();\r\n    const solution = (zeros(localSuppliers.length, localCustomers.length) as Matrix).map(_ => undefined);\r\n\r\n    if (!balanced) {\r\n        profits.resize([suppliers.length - 1, localCustomers.length - 1]);\r\n        profits.resize([suppliers.length, localCustomers.length], -Infinity);\r\n    }\r\n\r\n    const sortedProfits = (profits.toArray() as number[][])\r\n        .flatMap((row, i) => row.map((value, j) => ({ value, i, j })))\r\n        .sort((a, b) => b.value - a.value);\r\n\r\n    for (const profit of sortedProfits) {\r\n        if (sum(localCustomers.map(c => c.demand)) === 0 || sum(suppliers.map(s => s.supply)) === 0)\r\n            break;\r\n\r\n        if (localSuppliers[profit.i].supply > 0 && localCustomers[profit.j].demand > 0) {\r\n            const routeValue = Math.min(localSuppliers[profit.i].supply, localCustomers[profit.j].demand);\r\n\r\n            localSuppliers[profit.i].supply -= routeValue;\r\n            localCustomers[profit.j].demand -= routeValue;\r\n            solution.set([profit.i, profit.j], routeValue !== 0 ? routeValue : undefined);\r\n        }\r\n    }\r\n\r\n    const missingValuesCount = (suppliers.length + customers.length - 1) - (flatten(solution).toArray() as number[]).filter(el => el !== undefined).length;\r\n\r\n    if (missingValuesCount > 0) {\r\n        const [rows, cols] = solution.size();\r\n\r\n        for (let i = 0, replacedValues = 0; i < rows && replacedValues < missingValuesCount; i++) {\r\n            for (let j = 0; j < cols && replacedValues < missingValuesCount; j++) {\r\n                if (solution.get([i, j]) === undefined) {\r\n                    solution.set([i, j], 0);\r\n                    replacedValues++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return solution;\r\n};\r\n\r\nconst calculateDualVariables = (transportTable: Matrix, profits: Matrix): DualVariables => {\r\n    const [nSuppliers, nCustomers] = transportTable.size();\r\n    const size = nSuppliers + nCustomers - 1;\r\n    const transportArr = transportTable.toArray() as (number | undefined)[][];\r\n\r\n    let A = zeros(size, size + 1) as Matrix;\r\n\r\n    let currentRow = 0;\r\n    transportTable.forEach((val: number | undefined, [i, j]: any) => {\r\n        if (val !== undefined) {\r\n            A.set([currentRow, i], 1); // alpha\r\n            A.set([currentRow, nSuppliers + j], 1); // beta\r\n            currentRow++;\r\n        }\r\n    });\r\n\r\n    const B = transportArr\r\n        .flatMap((row, i) => (\r\n            row.map((val, j) => (val !== undefined ? profits.get([i, j]) : undefined))\r\n        ))\r\n        .filter(val => val !== undefined);\r\n\r\n    console.assert(B.length === size);\r\n\r\n    const [rows, cols] = A.size();\r\n    A = subset(A, index(range(0, rows), range(1, cols)));\r\n\r\n    const x = squeeze(lusolve(A, B) as Matrix).toArray() as number[];\r\n\r\n    return {\r\n        alphas: [0, ...x.slice(0, nSuppliers - 1)],\r\n        betas: x.slice(nSuppliers - 1),\r\n    };\r\n};\r\n\r\nexport const calculateOptimalTransportTable = (suppliers: Supplier[], customers: Customer[], costs: number[][], nMax = 10000): Results => {\r\n    const localCustomers = cloneDeep(customers);\r\n    const localSuppliers = cloneDeep(suppliers);\r\n    const localCosts = matrix(cloneDeep(costs));\r\n    const balanced = isBalanced(suppliers, customers);\r\n\r\n    const profitTable = generateProfitTable(localSuppliers, localCustomers, localCosts);\r\n\r\n    console.log('Zyski');\r\n    console.table(profitTable.toArray());\r\n\r\n    if (!balanced) {\r\n        localSuppliers.push({\r\n            price: 0,\r\n            supply: sum(customers.map(s => s.demand)),\r\n        });\r\n        localCustomers.push({\r\n            price: 0,\r\n            demand: sum(suppliers.map(s => s.supply)),\r\n        });\r\n        localCosts.resize([localSuppliers.length, localCustomers.length], 0);\r\n        profitTable.resize([localSuppliers.length, localCustomers.length], 0);\r\n    }\r\n\r\n    let transportTable = generateInitialSolution(localSuppliers, localCustomers, profitTable, balanced);\r\n\r\n    let iteration = 1;\r\n    do {\r\n        console.groupCollapsed(`Iteracja ${iteration}`);\r\n        console.table(transportTable.toArray());\r\n\r\n        const dualVariables = calculateDualVariables(transportTable, profitTable);\r\n        console.log('Alfa beta', dualVariables);\r\n\r\n        const deltas = getOptimalityFactor(profitTable, dualVariables);\r\n        console.log('Delty', deltas);\r\n\r\n        if (isSolutionOptimal(deltas))\r\n            break;\r\n\r\n        transportTable = findAndApplyCycle(transportTable, deltas);\r\n        console.groupEnd();\r\n        iteration++;\r\n    } while (iteration < nMax);\r\n\r\n    console.groupEnd();\r\n    transportTable = transportTable.map(val => (val === undefined ? 0 : val));\r\n\r\n    console.log('Wynik');\r\n    console.table(transportTable.toArray());\r\n\r\n    const profit = sum(dotMultiply(transportTable, profitTable) as Matrix);\r\n\r\n    // strip fictional suppliers and customers before returning the results\r\n    transportTable.resize([suppliers.length, customers.length]);\r\n    profitTable.resize([suppliers.length, customers.length]);\r\n\r\n    const puchaseCosts = map(\r\n        matrix(zeros(suppliers.length, customers.length)),\r\n        (_, [i, __]: [number, number]) => suppliers[i].price,\r\n    );\r\n\r\n    const cost: number = sum(dotMultiply(transportTable, add(puchaseCosts, costs)) as Matrix);\r\n\r\n    const incomes = map(\r\n        matrix(zeros(suppliers.length, customers.length)),\r\n        (_, [__, j]: [number, number]) => customers[j].price,\r\n    );\r\n\r\n    const income: number = sum(dotMultiply(transportTable, incomes) as Matrix);\r\n\r\n    console.log('Zysk', profit);\r\n    console.log('Koszt', cost);\r\n    console.log('Przychód', income);\r\n\r\n    return {\r\n        transportTable: transportTable.toArray() as number[][],\r\n        profitTable: profitTable.toArray() as number[][],\r\n        cost,\r\n        income,\r\n        profit,\r\n    };\r\n};\r\n","import styled from 'styled-components';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { PageContent as OriginalPageContent } from 'views/PageLayoutParts';\r\n\r\nexport const PageContent = styled(OriginalPageContent)`\r\n    padding: 24px 32px;\r\n\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-auto-rows: min-content;\r\n\r\n    grid-row-gap: 24px;\r\n    grid-column-gap: 32px;\r\n\r\n    grid-template-areas:\r\n        \"suppliers customers\"\r\n        \"costs costs\"\r\n        \"submit submit\"\r\n        \"results results\";\r\n\r\n`;\r\n\r\nexport const TableInput = styled(Form.Control)`\r\n    position: absolute;\r\n    height: 100%;\r\n    width: 100%;\r\n    border-radius: 0;\r\n    border-width: 0;\r\n    background: transparent;\r\n`;\r\n\r\nexport const GridTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr 1fr auto;\r\n    grid-gap: 8px;\r\n    grid-auto-rows: min-content;\r\n`;\r\n\r\nexport const ScrollTable = styled(GridTable)`\r\n    overflow-y: auto;\r\n    max-height: 400px;\r\n`;\r\n\r\nexport const GridCell = styled.div<{ col: number }>`\r\n    grid-column: ${({ col }) => col};\r\n`;\r\n\r\nexport const StickyGridCell = styled(GridCell)`\r\n    position: sticky;\r\n    top: 0;\r\n    background: white;\r\n`;\r\n\r\nexport const SectionHeader = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    margin-bottom: 16px;\r\n`;\r\n\r\nexport const SectionHeaderText = styled.h3`\r\n    margin-bottom: 0;\r\n`;\r\n\r\nexport const CustomersWrapper = styled.div`\r\n    grid-area: customers;\r\n`;\r\n\r\nexport const SuppliersWrapper = styled.div`\r\n    grid-area: suppliers;\r\n`;\r\n\r\nexport const CostsWrapper = styled.div`\r\n    grid-area: costs;\r\n\r\n    overflow-x: auto;\r\n\r\n    td {\r\n        min-width: 70px;\r\n        padding: 0;\r\n        position: relative;\r\n    }\r\n\r\n    th {\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nexport const ResultsWrapper = styled.div`\r\n    grid-area: results;\r\n\r\n    overflow-x: auto;\r\n\r\n    td {\r\n        min-width: 70px;\r\n    }\r\n\r\n    th {\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nexport const ProfitWrapper = styled.div`\r\n    text-align: right;\r\n`;\r\n\r\nexport const ProfitLabel = styled.div`\r\n    font-size: 12px;\r\n    color: #999;\r\n`;\r\n\r\nexport const ProfitText = styled.div`\r\n    font-size: 22px;\r\n`;\r\n\r\nexport const SubmitArea = styled.div`\r\n    grid-area: submit;\r\n\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { BsFillPlayFill } from 'react-icons/bs';\r\nimport { AiFillDelete, AiOutlinePlusCircle } from 'react-icons/ai';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { PageHeader, PageWrapper } from '../PageLayoutParts';\r\nimport { Supplier, Customer, Results } from './interfaces';\r\nimport { initialSuppliers, initialCustomers, initialCosts } from './constants';\r\nimport { calculateOptimalTransportTable } from './alg';\r\nimport {\r\n    PageContent,\r\n    CostsWrapper,\r\n    SuppliersWrapper,\r\n    CustomersWrapper,\r\n    ResultsWrapper,\r\n    TableInput,\r\n    GridCell,\r\n    StickyGridCell,\r\n    SubmitArea,\r\n    ScrollTable,\r\n    SectionHeader,\r\n    ProfitWrapper,\r\n    ProfitLabel,\r\n    ProfitText,\r\n    SectionHeaderText,\r\n} from './parts';\r\n\r\nconst BrokerProblemView: React.FC = () => {\r\n    const [suppliers, setSuppliers] = useState<Supplier[]>(initialSuppliers);\r\n    const [customers, setCustomers] = useState<Customer[]>(initialCustomers);\r\n    const [costs, setCosts] = useState<number[][]>(initialCosts);\r\n    const [results, setResults] = useState<Results | undefined>(undefined);\r\n\r\n    const updateSupplier = (index: number, prop: keyof Supplier) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newArr = [...suppliers];\r\n        newArr[index][prop] = e.target.valueAsNumber;\r\n        setSuppliers(newArr);\r\n    };\r\n\r\n    const updateCustomer = (index: number, prop: keyof Customer) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newArr = [...customers];\r\n        newArr[index][prop] = e.target.valueAsNumber;\r\n        setCustomers(newArr);\r\n    };\r\n\r\n    const updateCosts = (i: number, j: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newArr = [...costs];\r\n        newArr[i][j] = e.target.valueAsNumber;\r\n        setCosts(newArr);\r\n    };\r\n\r\n    const addSupplier = () => {\r\n        setSuppliers([\r\n            ...suppliers,\r\n            {\r\n                price: 0,\r\n                supply: 0,\r\n            },\r\n        ]);\r\n        setCosts([\r\n            ...costs,\r\n            new Array(customers.length).fill(0),\r\n        ]);\r\n    };\r\n\r\n    const addCustomer = () => {\r\n        setCustomers([\r\n            ...customers,\r\n            {\r\n                price: 0,\r\n                demand: 0,\r\n            },\r\n        ]);\r\n        setCosts(costs.map(row => [...row, 0]));\r\n    };\r\n\r\n    const removeCutomer = (index: number) => () => {\r\n        setCustomers([...customers.filter((_, i) => i !== index)]);\r\n        setCosts(costs.map(row => row.filter((_, i) => i !== index)));\r\n    };\r\n\r\n    const removeSupplier = (index: number) => () => {\r\n        setSuppliers([...suppliers.filter((_, i) => i !== index)]);\r\n        setCosts([...costs.filter((_, i) => i !== index)]);\r\n    };\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <PageHeader>Zagadnienie pośrednika</PageHeader>\r\n            <PageContent>\r\n                <SuppliersWrapper>\r\n                    <SectionHeader><SectionHeaderText>Dostawcy</SectionHeaderText></SectionHeader>\r\n                    <ScrollTable>\r\n                        <StickyGridCell col={1}>Dostawca</StickyGridCell>\r\n                        <StickyGridCell col={2}>Podaż</StickyGridCell>\r\n                        <StickyGridCell col={3}>Cena kupna</StickyGridCell>\r\n                        <StickyGridCell col={4}>\r\n                            <Button variant=\"success\" onClick={addSupplier}><AiOutlinePlusCircle /></Button>\r\n                        </StickyGridCell>\r\n                        {suppliers.map(({ price, supply }, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <GridCell col={1}>D {index + 1}</GridCell>\r\n                                <GridCell col={2}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        value={supply}\r\n                                        onChange={updateSupplier(index, 'supply')}\r\n                                    />\r\n                                </GridCell>\r\n                                <GridCell col={3}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        value={price}\r\n                                        min=\"0\"\r\n                                        onChange={updateSupplier(index, 'price')}\r\n                                    />\r\n                                </GridCell>\r\n                                <GridCell col={4}>\r\n                                    {suppliers.length > 1 && (\r\n                                        <Button\r\n                                            variant=\"outline-danger\"\r\n                                            onClick={removeSupplier(index)}\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            <AiFillDelete />\r\n                                        </Button>\r\n                                    )}\r\n                                </GridCell>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </ScrollTable>\r\n                </SuppliersWrapper>\r\n                <CustomersWrapper>\r\n                    <SectionHeader><SectionHeaderText>Odbiorcy</SectionHeaderText></SectionHeader>\r\n                    <ScrollTable>\r\n                        <StickyGridCell col={1}>Odbiorca</StickyGridCell>\r\n                        <StickyGridCell col={2}>Popyt</StickyGridCell>\r\n                        <StickyGridCell col={3}>Cena sprzedaży</StickyGridCell>\r\n                        <StickyGridCell col={4}>\r\n                            <Button variant=\"success\" onClick={addCustomer}><AiOutlinePlusCircle /></Button>\r\n                        </StickyGridCell>\r\n                        {customers.map(({ price, demand }, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <GridCell col={1}>O {index + 1}</GridCell>\r\n                                <GridCell col={2}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        value={demand}\r\n                                        min=\"0\"\r\n                                        onChange={updateCustomer(index, 'demand')}\r\n                                    />\r\n                                </GridCell>\r\n                                <GridCell col={3}>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        value={price}\r\n                                        min=\"0\"\r\n                                        onChange={updateCustomer(index, 'price')}\r\n                                    />\r\n                                </GridCell>\r\n                                <GridCell col={4}>\r\n                                    {customers.length > 1 && (\r\n                                        <Button\r\n                                            variant=\"outline-danger\"\r\n                                            onClick={removeCutomer(index)}\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            <AiFillDelete />\r\n                                        </Button>\r\n                                    )}\r\n                                </GridCell>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </ScrollTable>\r\n                </CustomersWrapper>\r\n                <CostsWrapper>\r\n                    <SectionHeader><SectionHeaderText>Koszty</SectionHeaderText></SectionHeader>\r\n                    <Table bordered striped cellPadding=\"0\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th />\r\n                                {customers.map((_, i) => <th>O {i + 1}</th>)}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {costs.map((row, i) => (\r\n                                <tr>\r\n                                    <th>D {i + 1}</th>\r\n                                    {row.map((cost, j) => (\r\n                                        <td>\r\n                                            <TableInput\r\n                                                type=\"number\"\r\n                                                value={cost}\r\n                                                min=\"0\"\r\n                                                onChange={updateCosts(i, j)}\r\n                                            />\r\n                                        </td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </CostsWrapper>\r\n                <SubmitArea>\r\n                    <Button\r\n                        variant=\"success\"\r\n                        onClick={() => setResults(calculateOptimalTransportTable(suppliers, customers, costs))}\r\n                    >\r\n                        Oblicz <BsFillPlayFill />\r\n                    </Button>\r\n                </SubmitArea>\r\n                {results && (\r\n                    <ResultsWrapper>\r\n                        <SectionHeader>\r\n                            <SectionHeaderText>\r\n                                Wynik\r\n                            </SectionHeaderText>\r\n                            <ProfitWrapper>\r\n                                <ProfitLabel>Zysk</ProfitLabel>\r\n                                <ProfitText>{results.profit}</ProfitText>\r\n                            </ProfitWrapper>\r\n                            <ProfitWrapper>\r\n                                <ProfitLabel>Koszt</ProfitLabel>\r\n                                <ProfitText>{results.cost}</ProfitText>\r\n                            </ProfitWrapper>\r\n                            <ProfitWrapper>\r\n                                <ProfitLabel>Przychód</ProfitLabel>\r\n                                <ProfitText>{results.income}</ProfitText>\r\n                            </ProfitWrapper>\r\n                        </SectionHeader>\r\n                        <h5>Transporty</h5>\r\n                        <Table bordered striped cellPadding=\"0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th />\r\n                                    {customers.map((_, i) => <th>O {i + 1}</th>)}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.transportTable.map((row, i) => (\r\n                                    <tr>\r\n                                        <th>D {i + 1}</th>\r\n                                        {row.map(value => (<td>{value}</td>))}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                        <h5>Zyski jednostkowe</h5>\r\n                        <Table bordered striped cellPadding=\"0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th />\r\n                                    {customers.map((_, i) => <th>O {i + 1}</th>)}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {results.profitTable.map((row, i) => (\r\n                                    <tr>\r\n                                        <th>D {i + 1}</th>\r\n                                        {row.map(value => (<td>{value}</td>))}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </ResultsWrapper>\r\n                )}\r\n            </PageContent>\r\n        </PageWrapper>\r\n    );\r\n};\r\n\r\nexport default BrokerProblemView;\r\n","var _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgTransportIcon6(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 948 495\",\n    style: {\n      enableBackground: \"new 0 0 948 495\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M702.3,393.1c-114.4,0-228.5,0-342.9,0c-0.7,3-1.3,5.8-2.1,8.7c-8.1,29.2-34.5,48.3-65.2,47.2c-28.9-1-54.1-22.5-59.8-51.4 c-0.8-3.8-2-4.8-5.7-4.8c-18.5,0.2-37,0.1-55.5,0.1c-11.7,0-17.2-7.3-13.8-18.3c8.2-26.6,16.4-53.1,24.6-79.7c2-6.4,7.1-10,13-9.6 c6.1,0.5,11.1,5,11.6,11.1c0.2,2.4-0.4,5-1.1,7.3c-5.9,19.4-11.9,38.8-17.9,58.2c-0.5,1.7-1,3.5-1.6,5.8c12.1,0,23.7-0.5,35.3,0.2 c8.1,0.4,12.5-1.2,16-9.8c9.6-23.8,34.4-38.7,59.6-37.8c27.1,1,50.2,17.4,59.1,42.6c1.3,3.8,2.9,5,6.9,5 c70.2-0.1,140.3-0.1,210.5,0c4.4,0,5.9-1.5,7-5.4c23.5-77.9,48.2-155.5,68.1-234.4c0.3-1.1,0.5-2.2,0.9-4c-2.1,0-3.9,0-5.6,0 c-129.5,0-259,0-388.5-0.1c-4.1,0-6.1,1.2-6.9,5.1c-0.6,2.7-1.6,5.4-2.7,8c-2.7,6.6-9.5,9.7-16,7.3c-6.3-2.3-9.7-8.7-7.7-15.3 c2.2-7.3,4.7-14.6,7.3-21.8c1.9-5.2,5.9-7.9,11.4-8.2c1.2-0.1,2.3,0,3.5,0c139.5,0,279,0,418.5,0c0.8,0,1.7,0,2.5,0 c9.5,0.2,15,7.2,12.7,16.5c-1.7,7.3-3.7,14.5-5.6,21.7c0,0.1,0.1,0.3,0.2,1c1.8,0,3.8,0,5.7,0c31.7,0,63.3,0.1,95-0.1 c7.7-0.1,12.7,2.7,16.6,9.4c19.3,33.9,38.8,67.5,58.5,101.2c1.5,2.6,3.9,5,6.5,6.5c17.5,10.3,35.2,20.4,52.7,30.6 c7.7,4.4,9.5,9.1,7.1,17.5c-7.6,26.1-15.1,52.1-22.7,78.1c-2.5,8.5-6.3,11.3-15.2,11.3c-13.5,0-27,0-40.5,0c-1.8,0-3.6,0-5.6,0 c-3,18.1-11.2,32.7-25.7,43.4c-11.9,8.8-25.4,13-40.2,12.7C733.8,448.4,710.6,427.8,702.3,393.1z M610.2,367.3 c0.9,0.3,1.3,0.5,1.8,0.5c29.8,0,59.6,0.1,89.5-0.1c1.3,0,3.3-1.9,3.8-3.3c10.3-27.2,33.5-44,61.2-44c27.7,0,51,16.8,61,44.1 c1,2.7,2.3,3.5,5,3.5c11-0.1,22-0.2,33,0c3.4,0.1,4.6-1.3,5.4-4.2c5.3-18.7,10.7-37.4,16.3-56.1c0.9-3.1,0.2-4.3-2.4-5.8 c-15.8-8.9-31.6-17.9-47.1-27.3c-3.4-2-6.6-5.2-8.6-8.6c-18.9-32.3-37.6-64.7-56.2-97.3c-2.1-3.8-4.4-5.4-8.9-5.3 c-30.3,0.2-60.6,0.2-91,0c-4.7,0-6.7,1.3-7.9,5.8c-14.6,52.7-29.4,105.4-44.1,158.1C617.3,340.6,613.8,353.9,610.2,367.3z  M766.6,345.6c-21.8-0.1-39.5,17.6-39.4,39.4c0.1,21.2,17.7,38.7,39,38.9c21.8,0.1,39.7-17.6,39.6-39.2 C805.7,363.1,788.2,345.7,766.6,345.6z M295.4,345.6c-21.6-0.1-39.2,17.2-39.4,38.8c-0.2,21.5,17.3,39.3,38.8,39.5 c21.8,0.2,39.7-17.4,39.6-39.1C334.5,363.1,317.1,345.7,295.4,345.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M183,181.5c-49.1,0-98.3,0-147.4,0c-10.6,0-16.4-4.4-16.5-12.4c-0.1-8.2,5.9-12.7,16.7-12.7c98.5,0,196.9,0,295.4,0 c2.3,0,4.7,0,6.9,0.5c6,1.3,10.1,6.7,9.8,12.7c-0.3,5.9-4.6,10.7-10.5,11.6c-2.1,0.3-4.3,0.3-6.5,0.3 C281.6,181.5,232.3,181.5,183,181.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M273,200.7c37,0,74,0,111,0c2.2,0,4.4,0,6.5,0.4c5.2,1.1,9.2,6.1,9.4,11.6c0.2,5.4-3.3,10.6-8.5,12.2 c-2,0.6-4.3,0.8-6.4,0.8c-75,0-150,0-224.9,0c-10.7,0-17.2-7.7-14.2-16.5c1.9-5.5,6.1-8.5,12.7-8.5c15.2-0.1,30.3,0,45.5,0 C227,200.7,250,200.7,273,200.7z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M192,248.9c32.8,0,65.6,0,98.5,0c8.2,0,13.5,4.8,13.8,12c0.2,6.8-4.5,12.3-11.2,13c-1.6,0.2-3.3,0.1-5,0.1 c-64.3,0-128.6,0-192.9,0c-1.2,0-2.3,0-3.5,0c-7.4-0.3-12.7-5.7-12.6-12.8c0.1-6.8,5.3-12.1,12.6-12.2c11.5-0.2,23-0.1,34.5-0.1 C148,248.9,170,248.9,192,248.9z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTransportIcon6);\nexport default __webpack_public_path__ + \"static/media/transport-icon-6.15287559.svg\";\nexport { ForwardRef as ReactComponent };","import { GLPK, LP as OptimizationProblem, Result } from 'glpk.js';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport zip from 'lodash/zip';\r\nimport {\r\n    BrokerNode,\r\n    CustomerNode,\r\n    Graph,\r\n    GraphEdge,\r\n    SupplierNode,\r\n} from 'components/GraphEditor';\r\n\r\nlet glpk: GLPK | undefined;\r\n\r\n// this library cannot be imported in other way\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst libraryLoad = require('glpk.js').then((lib: GLPK) => {\r\n    glpk = lib;\r\n});\r\n\r\ntype VariablesDefinition = OptimizationProblem['subjectTo'][0]['vars'];\r\n\r\nexport interface Solution {\r\n    graph: Graph;\r\n    cost: number;\r\n    flow: number;\r\n}\r\n\r\nexport interface Solutions {\r\n    minCost: Solution;\r\n    maxFlow: Solution;\r\n}\r\n\r\nconst getVariableDefsFromEdges = (edges: GraphEdge[], nodeId: string, outboundCoefficient = 1, inboundCoefficient = -1): VariablesDefinition => ([\r\n    //  D_k- krawędzie wchodzące do węzła\r\n    ...edges.filter(e => e.target === nodeId).map(edge => ({\r\n        name: edge.id,\r\n        coef: inboundCoefficient,\r\n    })),\r\n    // W_k - krawędzie wychodzące z węzła\r\n    ...edges.filter(e => e.source === nodeId).map(edge => ({\r\n        name: edge.id,\r\n        coef: outboundCoefficient,\r\n    })),\r\n]);\r\n\r\nconst verifySolutionStatus = (solution: Result): void => {\r\n    if (!glpk)\r\n        return;\r\n\r\n    const { status } = solution.result;\r\n\r\n    if (status === glpk.GLP_UNDEF)\r\n        throw new Error('Zagadnienie nie ma rozwiązania');\r\n\r\n    if (status === glpk.GLP_INFEAS)\r\n        throw new Error('Znalezione rozwiązanie jest niewykonalne');\r\n\r\n    if (status === glpk.GLP_NOFEAS)\r\n        throw new Error('Zagadnienie nie posiada wykonalnego rozwiązania');\r\n\r\n    if (status === glpk.GLP_UNBND)\r\n        throw new Error('Zagadnienie wydaje się być nieograniczone');\r\n};\r\n\r\nexport const optimize = async (graph: Graph): Promise<Solutions> => {\r\n    if (!glpk)\r\n        await libraryLoad;\r\n\r\n    if (!glpk)\r\n        throw new Error('GLPK failed to load');\r\n\r\n    const { nodes, edges } = graph;\r\n\r\n    // Because TS does not see the above 'throw' as enough apparently\r\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n    const problem: OptimizationProblem = {\r\n        name: 'Minimalizacja kosztów',\r\n        objective: {\r\n            name: 'Sumaryczny koszt transportu',\r\n            direction: glpk.GLP_MIN,\r\n            vars: edges.map(({ id, weight }) => ({ name: id, coef: weight })),\r\n        },\r\n        subjectTo: [\r\n            // odbiorcy\r\n            ...nodes.filter(node => node instanceof CustomerNode).map(node => ({\r\n                name: `${node.title} (${node.id})`,\r\n                vars: getVariableDefsFromEdges(edges, node.id, -1, 1),\r\n                bnds: {\r\n                    type: glpk!.GLP_LO, // lower bound only\r\n                    lb: (node as CustomerNode).demand,\r\n                    ub: 0,\r\n                },\r\n            })),\r\n            // dostawcy\r\n            ...nodes.filter(node => node instanceof SupplierNode).map(node => ({\r\n                name: `${node.title} (${node.id})`,\r\n                vars: getVariableDefsFromEdges(edges, node.id, 1, -1),\r\n                bnds: {\r\n                    type: glpk!.GLP_UP, // upper bound only\r\n                    lb: 0,\r\n                    ub: (node as SupplierNode).supply,\r\n                },\r\n            })),\r\n            // pośrednicy\r\n            ...nodes.filter(node => node instanceof BrokerNode).map(node => ({\r\n                name: `${node.title} (${node.id})`,\r\n                vars: getVariableDefsFromEdges(edges, node.id, 1, -1),\r\n                bnds: {\r\n                    type: glpk!.GLP_FX, // fixed variable (= 0)\r\n                    lb: 0,\r\n                    ub: 0,\r\n                },\r\n            })),\r\n            // ograniczenia przepustowości tras\r\n            ...edges.map(edge => ({\r\n                name: `Ograniczenie przeływu na krawędzi ${edge.id}`,\r\n                vars: [\r\n                    {\r\n                        name: edge.id,\r\n                        coef: 1,\r\n                    },\r\n                ],\r\n                bnds: (\r\n                    edge.max !== undefined ? (\r\n                        {\r\n                            type: glpk!.GLP_DB,\r\n                            lb: edge.min,\r\n                            ub: edge.max,\r\n                        }\r\n                    ) : (\r\n                        {\r\n                            type: glpk!.GLP_LO,\r\n                            lb: edge.min,\r\n                            ub: 0,\r\n                        }\r\n                    )\r\n                ),\r\n            })),\r\n        ],\r\n    };\r\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\r\n\r\n    console.log(problem);\r\n\r\n    const minCostSolution = glpk.solve(problem, { msglev: glpk.GLP_MSG_DBG });\r\n\r\n    verifySolutionStatus(minCostSolution);\r\n\r\n    console.log(minCostSolution);\r\n\r\n    problem.name = 'Maksymalizacja przepływu';\r\n    problem.objective = {\r\n        direction: glpk.GLP_MAX,\r\n        name: 'Sumaryczny przepływ dóbr w sieci',\r\n        vars: nodes.filter(node => node instanceof SupplierNode).flatMap(node => getVariableDefsFromEdges(graph.edges, node.id, 1, -1)),\r\n    };\r\n\r\n    console.log(problem);\r\n\r\n    const maxFlowSolution = glpk.solve(problem, { msglev: glpk.GLP_MSG_ALL });\r\n\r\n    verifySolutionStatus(maxFlowSolution);\r\n\r\n    console.log(maxFlowSolution);\r\n\r\n    const minCostGraph = cloneDeep(graph);\r\n    const maxFlowGraph = cloneDeep(graph);\r\n\r\n    for (const [id, value] of Object.entries(minCostSolution.result.vars)) {\r\n        const edge = minCostGraph.edges.find(e => e.id === id);\r\n\r\n        if (edge)\r\n            edge.weight = value;\r\n    }\r\n\r\n    for (const [id, value] of Object.entries(maxFlowSolution.result.vars)) {\r\n        const edge = maxFlowGraph.edges.find(e => e.id === id);\r\n\r\n        if (edge)\r\n            edge.weight = value;\r\n    }\r\n\r\n    return {\r\n        minCost: {\r\n            graph: minCostGraph,\r\n            flow: minCostGraph.nodes.filter(node => node instanceof SupplierNode).map(node => ({\r\n                inflow: minCostGraph.edges.filter(e => e.target === node.id).reduce((total, edge) => total + edge.weight, 0),\r\n                out: minCostGraph.edges.filter(e => e.source === node.id).reduce((total, edge) => total + edge.weight, 0),\r\n            }))\r\n                .reduce((total, { inflow, out }) => total + (out - inflow), 0),\r\n            cost: minCostSolution.result.z,\r\n        },\r\n        maxFlow: {\r\n            graph: maxFlowGraph,\r\n            flow: maxFlowSolution.result.z,\r\n            cost: zip(graph.edges, maxFlowGraph.edges).reduce((total, [e1, e2]) => total + (e1?.weight ?? 0) * (e2?.weight ?? 0), 0),\r\n        },\r\n    };\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface ImageSVGProps {\r\n    src?: React.FunctionComponent<React.SVGProps<SVGSVGElement>>;\r\n    className?: string;\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ImageSvg: React.FC<ImageSVGProps> = ({ src, children, className }) => {\r\n    if (!src && !children)\r\n        return <Wrapper className={className} />;\r\n\r\n    // because condition above ensures that src or children will be defined\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const Component = src!;\r\n\r\n    return (\r\n        <Wrapper className={className}>\r\n            {children || <Component />}\r\n        </Wrapper>\r\n    );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { ImageSvg } from 'components/ImageSVG';\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n\r\n    padding: 0 10vw;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    flex-flow: row wrap;\r\n`;\r\n\r\nexport const LinkCard = styled(Link)`\r\n    width: 300px;\r\n    height: 350px;\r\n    padding: 18px 24px;\r\n    border-radius: 3px;\r\n    background: #eee;\r\n\r\n    color: black;\r\n    text-decoration: none;\r\n\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n\r\n    box-shadow: 0 6px 12px 0px rgba(0,0,0,0.5);\r\n    transition: box-shadow 0.3s ease-in-out;\r\n\r\n    &:hover{\r\n        box-shadow: 0 8px 16px 3px rgba(0,0,0,0.65);\r\n        color: inherit;\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\nexport const CardDescription = styled.div`\r\n    text-align: center;\r\n    font-size: 18px;\r\n    margin-bottom: 6px;\r\n`;\r\n\r\nexport const CardImageWrapper = styled(ImageSvg)`\r\n    flex-grow: 1;\r\n`;\r\n","import React from 'react';\r\nimport { ReactComponent as GraphIcon } from 'assets/graph.svg';\r\nimport { ReactComponent as TransportIcon } from 'assets/transport-icon-6.svg';\r\nimport { RouteNames } from 'appConstants';\r\nimport { CardDescription, CardImageWrapper, LinkCard, Wrapper } from './parts';\r\n\r\nconst LandingView: React.FC = () => (\r\n    <Wrapper>\r\n        <LinkCard to={RouteNames.BrokerProblem}>\r\n            <CardImageWrapper src={TransportIcon} />\r\n            <CardDescription>Zagadnienie pośrednika</CardDescription>\r\n        </LinkCard>\r\n        <LinkCard to={RouteNames.DeliveryNetwork}>\r\n            <CardImageWrapper src={GraphIcon} />\r\n            <CardDescription>Optymalizacja sieci dostaw</CardDescription>\r\n        </LinkCard>\r\n    </Wrapper>\r\n);\r\n\r\nexport default LandingView;\r\n","import styled from 'styled-components';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Wrapper as EditorWrapper } from '../GraphEditor/parts';\r\n\r\nexport const BackButton = styled(Button)`\r\n    background: white;\r\n    position: absolute;\r\n    bottom: 24px;\r\n    left: 28px;\r\n`;\r\n\r\nexport const Wrapper = styled(EditorWrapper)``;\r\n","import React from 'react';\r\nimport Color from 'color';\r\nimport { GraphView, IEdge, INode } from 'react-digraph';\r\nimport colormap, { ColorMapName } from 'colormap';\r\nimport { BsChevronLeft } from 'react-icons/bs';\r\nimport { Graph } from '../constants';\r\nimport GraphNodeContent from '../GraphNodeContent/GraphNodeContent';\r\nimport { GraphEdge } from '../GraphEdge';\r\nimport { BackButton, Wrapper } from './parts';\r\nimport { GraphNode } from '../GraphNode';\r\n\r\ninterface GraphDisplayerProps {\r\n    graph: Graph;\r\n    onReset?: () => void;\r\n    selected: GraphNode | GraphEdge | null;\r\n    onSelectionChange: (selected: GraphNode | GraphEdge | null) => void;\r\n    colormap?: ColorMapName;\r\n}\r\n\r\nconst getEdgeColor = (colors: string[], weight: number, min: number, max: number): Color => {\r\n    let ratio = 1;\r\n\r\n    if (min !== max)\r\n        ratio = (weight - min) / (max - min);\r\n\r\n    const ind = ratio * (colors.length - 1);\r\n    const indexLower = Math.floor(ind);\r\n\r\n    if (ind === indexLower)\r\n        return new Color(colors[ind]);\r\n\r\n    const indexUpper = Math.ceil(ind);\r\n\r\n    return new Color(colors[indexLower]).mix(new Color(colors[indexUpper]), (ind - indexLower));\r\n};\r\n\r\nexport const GraphDisplayer: React.FC<GraphDisplayerProps> = ({ graph, onReset, colormap: colorMapName = 'freesurface-red', onSelectionChange, selected }) => {\r\n    const colors = React.useMemo(\r\n        () => (\r\n            colormap({\r\n                colormap: colorMapName,\r\n                nshades: 100,\r\n                format: 'hex',\r\n            })\r\n                .reverse()\r\n                .slice(5, -10)\r\n        ),\r\n        [colorMapName],\r\n    );\r\n\r\n    const minVal = Math.min(...graph.edges.map(edge => edge.weight));\r\n    const maxVal = Math.max(...graph.edges.map(edge => edge.weight));\r\n\r\n    const setEdgeColor = (_: string, __: React.ElementType, edge: IEdge, egdeContainer: SVGGElement) => {\r\n        const color = getEdgeColor(colors, (edge as GraphEdge).weight, minVal, maxVal);\r\n\r\n        const edgePath = egdeContainer.querySelector('.edge-path') as SVGPathElement | null;\r\n\r\n        if (!edgePath)\r\n            return;\r\n\r\n        edgePath.style.stroke = color.toString();\r\n        edgePath.style.markerEnd = `url(#end-arrow-${edge.id})`;\r\n\r\n        const edgeTextWrapper = egdeContainer.querySelector('.edge > use') as SVGUseElement | null;\r\n\r\n        if (!edgeTextWrapper)\r\n            return;\r\n\r\n        edgeTextWrapper.style.stroke = color.toString();\r\n    };\r\n\r\n    const selectNode = (node: INode | null) => {\r\n        onSelectionChange(node as GraphNode | null);\r\n    };\r\n\r\n    const selectEdge = (edge: IEdge | null) => {\r\n        onSelectionChange(edge as GraphEdge | null);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <GraphView\r\n                nodeKey=\"id\"\r\n                nodes={graph.nodes}\r\n                edges={graph.edges}\r\n                selected={selected}\r\n                onSelectEdge={selectEdge}\r\n                onSelectNode={selectNode}\r\n                renderNodeText={(data, id, isSelected) => <GraphNodeContent node={data} id={id} isSelected={isSelected} />}\r\n                rotateEdgeHandle={false}\r\n                showGraphControls={false}\r\n                afterRenderEdge={setEdgeColor}\r\n                canCreateEdge={() => false}\r\n                canSwapEdge={() => false}\r\n                nodeTypes={{\r\n                    default: {\r\n                        shapeId: '#defaultNode',\r\n                        shape: (\r\n                            <symbol viewBox=\"0 0 100 100\" width=\"100\" height=\"100\" id=\"defaultNode\">\r\n                                <circle cx=\"50\" cy=\"50\" r=\"48\" stroke=\"#333\" />\r\n                            </symbol>\r\n                        ),\r\n                    },\r\n                }}\r\n                edgeTypes={{\r\n                    default: {\r\n                        shapeId: '#defaultEdge',\r\n                        shape: (\r\n                            <symbol viewBox=\"0 0 70 30\" id=\"defaultEdge\" key=\"0\">\r\n                                <rect x=\"0\" y=\"0\" width=\"70\" height=\"30\" fill=\"currentColor\" />\r\n                            </symbol>\r\n                        ),\r\n                    },\r\n                }}\r\n                nodeSubtypes={{\r\n                    none: {\r\n                        shapeId: '',\r\n                        // used as a way to insert things into <defs>\r\n                        shape: (\r\n                            <React.Fragment>\r\n                                <marker id=\"end-arrow-not-selected\" viewBox=\"0 -4 8 8\" refX=\"4\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\r\n                                    <path d=\"M0,-4L8,0L0,4\" width=\"8\" height=\"8\" />\r\n                                </marker>\r\n                                {graph.edges.map(edge => (\r\n                                    <marker key={edge.id} id={`end-arrow-${edge.id}`} viewBox=\"0 -4 8 8\" refX=\"4\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\">\r\n                                        <path d=\"M0,-4L8,0L0,4\" width=\"8\" height=\"8\" fill={getEdgeColor(colors, edge.weight, minVal, maxVal).toString()} />\r\n                                    </marker>\r\n                                ))}\r\n                            </React.Fragment>\r\n                        ),\r\n                    },\r\n                }}\r\n            />\r\n            <BackButton variant=\"outline-primary\" onClick={onReset}><BsChevronLeft /> Wróć do edycji</BackButton>\r\n        </Wrapper>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\nimport { PageWrapper as OriginalPageWrapper, PageContent as OriginalPageContent } from 'views/PageLayoutParts';\r\nimport { GraphEntityDetails as OriginalGraphEntityDetails } from 'components/GraphEditor';\r\nimport { Wrapper as EntityDetailsWrapper } from 'components/GraphEditor/GraphEntityDetails/parts';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport BsButton from 'react-bootstrap/Button';\r\n\r\nexport const PageWrapper = styled(OriginalPageWrapper)`\r\n    grid-template-rows: auto auto 1fr;\r\n\r\n    grid-template-areas:\r\n        \"header header header\"\r\n        \"graph-sidebar content solution-details\"\r\n        \". content .\";\r\n\r\n`;\r\n\r\nexport const GraphEntityDetails = styled(OriginalGraphEntityDetails)`\r\n    grid-area: graph-sidebar;\r\n`;\r\n\r\nexport const PageContent = styled(OriginalPageContent)`\r\n    padding: 0;\r\n    overflow: hidden;\r\n    position: relative;\r\n`;\r\n\r\nexport const SolutionButtons = styled(ButtonGroup)`\r\n    position: absolute;\r\n    top: 22px;\r\n    left: 28px;\r\n`;\r\n\r\nexport const Button = styled(BsButton)`\r\n    z-index: 1;\r\n    background: white;\r\n`;\r\n\r\nexport const SolutionDetails = styled(EntityDetailsWrapper)`\r\n    grid-area: solution-details;\r\n    height: fit-content;\r\n\r\n    border-radius: 0;\r\n    border-top-left-radius: 3px;\r\n    border-bottom-left-radius: 3px;\r\n\r\n    margin-left: 24px;\r\n    margin-right: 0;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { PageHeader } from 'views/PageLayoutParts';\r\nimport GraphEditor, {\r\n    Graph,\r\n    GraphEdge,\r\n    BrokerNode,\r\n    CustomerNode,\r\n    GraphNode,\r\n    SupplierNode,\r\n} from 'components/GraphEditor';\r\nimport { getNextSequenceNumberForNodeType, isValidEdge, updateNodeNumbers } from 'components/GraphEditor/utils';\r\nimport { GraphDisplayer } from 'components/GraphEditor/GraphDisplayer/GraphDisplayer';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    GraphEntityDetails,\r\n    PageContent,\r\n    PageWrapper,\r\n    SolutionButtons,\r\n    Button,\r\n    SolutionDetails,\r\n} from './parts';\r\nimport { optimize, Solutions } from './algorithm';\r\n\r\nconst nodes: GraphNode[] = [\r\n    // new SupplierNode(250, 1, 0, 0),\r\n    // new SupplierNode(300, 2, 0, 300),\r\n    // new CustomerNode(120, 1, 500, -100),\r\n    // new CustomerNode(250, 2, 500, 150),\r\n    // new CustomerNode(100, 3, 500, 400),\r\n    // new BrokerNode(1, 250, 150),\r\n];\r\n\r\nconst edges: GraphEdge[] = [\r\n    // new GraphEdge(nodes[0].id, nodes[2].id, 3, 30, 50),\r\n    // new GraphEdge(nodes[0].id, nodes[5].id, 5, 0, 150),\r\n    // new GraphEdge(nodes[1].id, nodes[5].id, 6),\r\n    // new GraphEdge(nodes[1].id, nodes[4].id, 2),\r\n    // new GraphEdge(nodes[2].id, nodes[3].id, 8),\r\n    // new GraphEdge(nodes[3].id, nodes[4].id, 4),\r\n    // new GraphEdge(nodes[5].id, nodes[2].id, 5),\r\n    // new GraphEdge(nodes[5].id, nodes[3].id, 4),\r\n    // new GraphEdge(nodes[5].id, nodes[4].id, 1),\r\n    // new GraphEdge(nodes[1].id, nodes[0].id, 2),\r\n];\r\n\r\n// FIXME: refactor graph state to useReducer and actions, move logic out to custom hooks\r\nconst DeliveryNetworkView: React.FC = () => {\r\n    const [graph, setGraph] = useState<Graph>({\r\n        nodes,\r\n        edges,\r\n    });\r\n    const [showMaxFlowSolution, setShowMaxFlowSolution] = useState(false);\r\n    const [solutions, setSolutions] = useState<Solutions | null>(null);\r\n    const [selected, setSelected] = useState<GraphNode | GraphEdge | null>(null);\r\n\r\n    const updateEntity = (entity: GraphNode | GraphEdge) => {\r\n        if (entity instanceof GraphNode) {\r\n            const newGraph = {\r\n                ...graph,\r\n                nodes: [...graph.nodes.filter(node => node.id !== entity.id)],\r\n            };\r\n\r\n            const oldNode = graph.nodes.find(n => n.id === entity.id);\r\n\r\n            if (!oldNode)\r\n                return;\r\n\r\n            if (oldNode.constructor !== entity.constructor) {\r\n                const invalidEdges = newGraph.edges\r\n                    .filter(edge => edge.target === entity.id || edge.source === entity.id)\r\n                    .map(edge => ({\r\n                        ...edge,\r\n                        source: newGraph.nodes.find(node => node.id === edge.source) ?? entity,\r\n                        target: newGraph.nodes.find(node => node.id === edge.target) ?? entity,\r\n                    }))\r\n                    .filter(({ source, target }) => !isValidEdge(source, target));\r\n\r\n                if (invalidEdges.length > 0) {\r\n                    // Nie będę robił interfejsu dla tego jednego okienka dialogowego\r\n                    // eslint-disable-next-line no-alert\r\n                    if (!window.confirm('Zmiana typu węzła spowoduje, że niektóre krawędzie zostaną usunięte. Czy kontynuować?'))\r\n                        return;\r\n\r\n                    newGraph.edges = newGraph.edges.filter(edge => !invalidEdges.find(e => e.id === edge.id));\r\n                }\r\n\r\n                updateNodeNumbers(oldNode, newGraph.nodes);\r\n                entity.sequenceNumber = getNextSequenceNumberForNodeType(graph.nodes, entity);\r\n            }\r\n\r\n            newGraph.nodes.push(entity);\r\n\r\n            setGraph(newGraph);\r\n        } else {\r\n            setGraph({\r\n                ...graph,\r\n                edges: [\r\n                    ...graph.edges.filter(edge => edge.id !== entity.id),\r\n                    entity,\r\n                ],\r\n            });\r\n        }\r\n        setSelected(entity);\r\n    };\r\n\r\n    const updateGraph = (g: Graph) => {\r\n        setGraph(g);\r\n    };\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <PageHeader>Optymalizacja sieci dostaw</PageHeader>\r\n            <PageContent>\r\n                {solutions !== null ? (\r\n                    <React.Fragment>\r\n                        <SolutionButtons>\r\n                            <Button\r\n                                variant=\"outline-primary\"\r\n                                active={!showMaxFlowSolution}\r\n                                onClick={() => {\r\n                                    setSelected(null);\r\n                                    setShowMaxFlowSolution(false);\r\n                                }}\r\n                            >\r\n                                Min. koszt\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"outline-primary\"\r\n                                active={showMaxFlowSolution}\r\n                                onClick={() => {\r\n                                    setSelected(null);\r\n                                    setShowMaxFlowSolution(true);\r\n                                }}\r\n                            >\r\n                                Max. przepływ\r\n                            </Button>\r\n                        </SolutionButtons>\r\n                        <GraphDisplayer\r\n                            graph={!showMaxFlowSolution ? solutions.minCost.graph : solutions.maxFlow.graph}\r\n                            colormap={showMaxFlowSolution ? 'freesurface-blue' : 'freesurface-red'}\r\n                            selected={selected}\r\n                            onSelectionChange={s => setSelected(s)}\r\n                            onReset={() => setSolutions(null)}\r\n                        />\r\n                    </React.Fragment>\r\n                ) : (\r\n                    <GraphEditor\r\n                        graph={graph}\r\n                        onGraphChange={updateGraph}\r\n                        selected={selected}\r\n                        onSelectionChange={s => setSelected(s)}\r\n                        onCalculateClick={async () => {\r\n                            try {\r\n                                setSolutions(await optimize(graph));\r\n                                setSelected(null);\r\n                            } catch (e) {\r\n                                toast.error(e.message);\r\n                            }\r\n                        }}\r\n                    />\r\n                )}\r\n            </PageContent>\r\n            <GraphEntityDetails\r\n                selectedEntity={selected}\r\n                onEntityChange={updateEntity}\r\n                nodes={graph.nodes}\r\n                readOnly={solutions !== null}\r\n                edgeWeightName={solutions !== null ? 'Przepływ' : 'Koszt'}\r\n            />\r\n            {solutions !== null && (\r\n                !showMaxFlowSolution ? (\r\n                    <SolutionDetails>\r\n                        <h5>Minimalizacja kosztów</h5>\r\n                        <b>Koszt: {solutions.minCost.cost}</b>\r\n                        Przepływ: {solutions.minCost.flow}\r\n                    </SolutionDetails>\r\n                ) : (\r\n                    <SolutionDetails>\r\n                        <h5>Maksymalizacja przepływu</h5>\r\n                        Koszt: {solutions.maxFlow.cost}<br />\r\n                        <b>Przepływ: {solutions.maxFlow.flow}</b>\r\n                    </SolutionDetails>\r\n                )\r\n            )}\r\n        </PageWrapper>\r\n    );\r\n};\r\n\r\nexport default DeliveryNetworkView;\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport RouteDependentBackground from 'components/RouteDependentBackground';\nimport { BrokerProblemView, LandingView, DeliveryNetworkView } from 'views';\nimport { RouteNames } from './appConstants';\n\nconst App: React.FC = () => (\n    <BrowserRouter>\n        <RouteDependentBackground>\n            <Switch>\n                <Route path={RouteNames.BrokerProblem} component={BrokerProblemView} />\n                <Route path={RouteNames.DeliveryNetwork} component={DeliveryNetworkView} />\n                <Route path={RouteNames.Home} component={LandingView} />\n            </Switch>\n        </RouteDependentBackground>\n    </BrowserRouter>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { Slide, ToastContainer } from 'react-toastify';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst GlobalStyles = createGlobalStyle`\n    *, *::after, *::before {\n        box-sizing: border-box;\n    }\n\n    body {\n        margin: 0;\n        font-family: 'Roboto', sans-serif;\n    }\n`;\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyles />\n        <App />\n        <ToastContainer\n            position=\"bottom-center\"\n            autoClose={4000}\n            limit={5}\n            rtl={false}\n            transition={Slide}\n            style={{ width: '40vw' }}\n            hideProgressBar\n            newestOnTop\n            closeOnClick\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n        />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","import { v4 as uuid } from 'uuid';\r\nimport { IEdge } from 'react-digraph';\r\n\r\nexport class GraphEdge implements IEdge {\r\n    id: string = uuid();\r\n    type = 'default';\r\n\r\n    get handleText() {\r\n        if (this.min !== 0 && this.max !== undefined)\r\n            return `◊ ${this.weight}`;\r\n\r\n        if (this.max !== undefined)\r\n            return `∧ ${this.weight}`;\r\n\r\n        if (this.min !== 0)\r\n            return `∨ ${this.weight}`;\r\n\r\n        return this.weight.toString();\r\n    }\r\n\r\n    get handleTooltipText() {\r\n        return `Koszt trasy: ${this.weight}`;\r\n    }\r\n\r\n    constructor(\r\n        public source: string,\r\n        public target: string,\r\n        public weight: number,\r\n        public min: number = 0,\r\n        public max?: number,\r\n    ) {}\r\n}\r\n","import Button from 'react-bootstrap/Button';\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    position: relative;\r\n    height: 100%;\r\n\r\n    * {\r\n        outline-width: 0 !important;\r\n    }\r\n\r\n    #end-arrow-not-selected {\r\n        fill: #555;\r\n    }\r\n\r\n    .edge {\r\n        stroke: #555;\r\n        marker-end: url(#end-arrow-not-selected);\r\n\r\n        .edge-handle-text {\r\n            fill: black;\r\n            stroke: none;\r\n        }\r\n\r\n        &.selected .edge-handle-text {\r\n            stroke: none;\r\n        }\r\n\r\n        &.selected {\r\n            marker-end: url(#end-arrow)\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GraphClickWrapper = styled.div`\r\n    height: inherit;\r\n`;\r\n\r\nexport const GoButton = styled(Button)`\r\n    position: absolute;\r\n    bottom: 24px;\r\n    right: 28px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const NodeTypeText = styled.text`\r\n    font-size: 10px;\r\n`;\r\n\r\nexport const Name = styled.text`\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const NodeValue = styled.text`\r\n    font-size: 10px;\r\n`;\r\n\r\nexport const Wrapper = styled.g<{ isSelected?: boolean }>`\r\n    cursor: pointer;\r\n\r\n    text {\r\n        fill: ${({ isSelected }) => (isSelected ? 'white' : 'black')};\r\n        alignment-baseline: middle;\r\n        text-anchor: middle;\r\n    }\r\n\r\n    ${NodeTypeText} {\r\n        fill: ${({ isSelected }) => (isSelected ? '#ccc' : '#888')};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { CustomerNode, GraphNode, SupplierNode } from '../GraphNode';\r\nimport { Wrapper, NodeTypeText, Name, NodeValue } from './parts';\r\n\r\ninterface GraphNodeProps {\r\n    className?: string;\r\n    node: GraphNode;\r\n    id: string | number;\r\n    isSelected: boolean;\r\n}\r\n\r\nconst GraphNodeContent: React.FC<GraphNodeProps> = ({\r\n    node,\r\n    className,\r\n    isSelected,\r\n}) => (\r\n    <Wrapper className={className} isSelected={isSelected}>\r\n        <NodeTypeText y=\"-25\">\r\n            {node.typeName}\r\n        </NodeTypeText>\r\n        <Name>{node.title}</Name>\r\n        <NodeValue y=\"25\">\r\n            {node instanceof SupplierNode && <React.Fragment>Podaż: {node.supply}</React.Fragment>}\r\n            {node instanceof CustomerNode && <React.Fragment>Popyt: {node.demand}</React.Fragment>}\r\n        </NodeValue>\r\n    </Wrapper>\r\n);\r\n\r\nexport default GraphNodeContent;\r\n"],"sourceRoot":""}